{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { request } from '../../request';\nconst initialState = {\n  games: [],\n  game: {}\n};\nexport const gamesSlice = createSlice({\n  name: 'games',\n  initialState,\n  reducers: {\n    getGamesR: (state, action) => {\n      state.games = action.payload;\n    },\n    getGameByIdR: (state, action) => {\n      state.game = action.payload;\n    },\n    createGameR: (state, action) => {\n      state.games = [...state.games, action.payload];\n    }\n  }\n});\nexport const getAllGames = () => async dispatch => {\n  try {\n    const data = await request({\n      url: '/api/games',\n      method: 'GET'\n    });\n    console.log(data, 'daattaaa');\n    if (!data) return alert(\"error in getAllPlayers\"); //   const response = await axios.get(`${API_URL}/${data}`);\n\n    dispatch(getGamesR(data.data));\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nexport const getGameById = game_id => async dispatch => {\n  try {\n    console.log(game_id, 'game id in dreucers');\n    const data = await request({\n      url: `/api/games/${game_id}`,\n      method: 'GET'\n    });\n    console.log(data, 'daattaaa');\n    if (!data) return alert(\"error in getGameById\"); //   const response = await axios.get(`${API_URL}/${data}`);\n\n    dispatch(getGameByIdR(data.data));\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nexport const createGame = newGame => async dispatch => {\n  try {\n    const data = await request({\n      url: '/api/games',\n      method: 'POST',\n      session: newGame\n    });\n    console.log(data, 'data in createGame');\n    if (!data) return alert(\"error in createGame\"); //   const response = await axios.get(`${API_URL}/${data}`);\n\n    dispatch(createGameR(data.data));\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nexport const editPlayerGameStats = gamePlayer => async dispatch => {\n  console.log(gamePlayer, ' gamePlayer game!!'); // try {\n  //     const data = await request({ url: '/api/games', method: 'POST', session: newGame});\n  //     console.log(data, 'data in createGame')\n  //     if (!data) return alert(\"error in createGame\")\n  // //   const response = await axios.get(`${API_URL}/${data}`);\n  //     dispatch(createGameR(data.data));\n  // } catch (err) {\n  //     throw new Error(err);\n  // }\n};\nexport const addPlayerGameStats = playerStats => async dispatch => {\n  console.log(playerStats, 'playerstattsss =====++++');\n  const {\n    game_id,\n    player_id,\n    ...rest\n  } = playerStats;\n\n  try {\n    const data = await request({\n      url: `/api/games/${game_id}/${player_id}`,\n      method: 'POST',\n      session: rest\n    });\n    console.log(data, 'data in addPlayerGameStats');\n    if (!data) return alert(\"error in addPlayerGameStats\"); //   const response = await axios.get(`${API_URL}/${data}`);\n    // dispatch(createGameR(data.data));\n  } catch (err) {\n    throw new Error(err);\n  }\n}; // Action creators are generated for each case reducer function\n\nexport const {\n  getGamesR,\n  createGameR,\n  getGameByIdR\n} = gamesSlice.actions;\nexport default gamesSlice.reducer;","map":{"version":3,"sources":["/Users/keithjones/Documents/development/projects/mp-lax/frontend/src/redux/slices/gamesSlices.js"],"names":["createSlice","request","initialState","games","game","gamesSlice","name","reducers","getGamesR","state","action","payload","getGameByIdR","createGameR","getAllGames","dispatch","data","url","method","console","log","alert","err","Error","getGameById","game_id","createGame","newGame","session","editPlayerGameStats","gamePlayer","addPlayerGameStats","playerStats","player_id","rest","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,eAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB;AAKA,OAAO,MAAMC,UAAU,GAAGL,WAAW,CAAC;AAClCM,EAAAA,IAAI,EAAE,OAD4B;AAElCJ,EAAAA,YAFkC;AAGlCK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAArB;AACH,KAHK;AAINC,IAAAA,YAAY,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACL,IAAN,GAAaM,MAAM,CAACC,OAApB;AACH,KANK;AAONE,IAAAA,WAAW,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACN,KAAN,GAAc,CAAC,GAAGM,KAAK,CAACN,KAAV,EAAiBO,MAAM,CAACC,OAAxB,CAAd;AACH;AATK;AAHwB,CAAD,CAA9B;AAiBP,OAAO,MAAMG,WAAW,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACjD,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMf,OAAO,CAAC;AAAEgB,MAAAA,GAAG,EAAE,YAAP;AAAqBC,MAAAA,MAAM,EAAE;AAA7B,KAAD,CAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkB,UAAlB;AACA,QAAI,CAACA,IAAL,EAAW,OAAOK,KAAK,CAAC,wBAAD,CAAZ,CAHX,CAIJ;;AACIN,IAAAA,QAAQ,CAACP,SAAS,CAACQ,IAAI,CAACA,IAAN,CAAV,CAAR;AACH,GAND,CAME,OAAOM,GAAP,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,CAVM;AAYP,OAAO,MAAME,WAAW,GAAIC,OAAD,IAAa,MAAOV,QAAP,IAAoB;AACxD,MAAI;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYK,OAAZ,EAAqB,qBAArB;AACA,UAAMT,IAAI,GAAG,MAAMf,OAAO,CAAC;AAAEgB,MAAAA,GAAG,EAAG,cAAaQ,OAAQ,EAA7B;AAAgCP,MAAAA,MAAM,EAAE;AAAxC,KAAD,CAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkB,UAAlB;AACA,QAAI,CAACA,IAAL,EAAW,OAAOK,KAAK,CAAC,sBAAD,CAAZ,CAJX,CAKJ;;AACIN,IAAAA,QAAQ,CAACH,YAAY,CAACI,IAAI,CAACA,IAAN,CAAb,CAAR;AACH,GAPD,CAOE,OAAOM,GAAP,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,CAXM;AAaP,OAAO,MAAMI,UAAU,GAAIC,OAAD,IAAa,MAAOZ,QAAP,IAAoB;AACvD,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMf,OAAO,CAAC;AAAEgB,MAAAA,GAAG,EAAE,YAAP;AAAqBC,MAAAA,MAAM,EAAE,MAA7B;AAAqCU,MAAAA,OAAO,EAAED;AAA9C,KAAD,CAA1B;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkB,oBAAlB;AACA,QAAI,CAACA,IAAL,EAAW,OAAOK,KAAK,CAAC,qBAAD,CAAZ,CAHX,CAIJ;;AACIN,IAAAA,QAAQ,CAACF,WAAW,CAACG,IAAI,CAACA,IAAN,CAAZ,CAAR;AACH,GAND,CAME,OAAOM,GAAP,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,CAVM;AAaP,OAAO,MAAMO,mBAAmB,GAAIC,UAAD,IAAgB,MAAOf,QAAP,IAAoB;AACnEI,EAAAA,OAAO,CAACC,GAAR,CAAYU,UAAZ,EAAuB,oBAAvB,EADmE,CAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAXM;AAaP,OAAO,MAAMC,kBAAkB,GAAIC,WAAD,IAAiB,MAAOjB,QAAP,IAAoB;AACnEI,EAAAA,OAAO,CAACC,GAAR,CAAYY,WAAZ,EAAyB,0BAAzB;AACA,QAAM;AAAEP,IAAAA,OAAF;AAAWQ,IAAAA,SAAX;AAAsB,OAAGC;AAAzB,MAAkCF,WAAxC;;AACA,MAAI;AACA,UAAMhB,IAAI,GAAG,MAAMf,OAAO,CAAC;AAAEgB,MAAAA,GAAG,EAAG,cAAaQ,OAAQ,IAAGQ,SAAU,EAA1C;AAA6Cf,MAAAA,MAAM,EAAE,MAArD;AAA6DU,MAAAA,OAAO,EAAEM;AAAtE,KAAD,CAA1B;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkB,4BAAlB;AACA,QAAI,CAACA,IAAL,EAAW,OAAOK,KAAK,CAAC,6BAAD,CAAZ,CAHX,CAIJ;AACI;AACH,GAND,CAME,OAAOC,GAAP,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,CAZM,C,CAeP;;AACA,OAAO,MAAM;AAAEd,EAAAA,SAAF;AAAaK,EAAAA,WAAb;AAA0BD,EAAAA;AAA1B,IAA2CP,UAAU,CAAC8B,OAA5D;AAEP,eAAe9B,UAAU,CAAC+B,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { request } from '../../request'\n\nconst initialState = {\n  games: [],\n  game: {}\n}\n\nexport const gamesSlice = createSlice({\n    name: 'games',\n    initialState,\n    reducers: {\n        getGamesR: (state, action) => {\n            state.games = action.payload;\n        },\n        getGameByIdR: (state, action) => {\n            state.game = action.payload;\n        },\n        createGameR: (state, action) => {\n            state.games = [...state.games, action.payload]\n        },\n    },\n})\n\n\nexport const getAllGames = () => async (dispatch) => {\n    try {\n        const data = await request({ url: '/api/games', method: 'GET' });\n        console.log(data, 'daattaaa')\n        if (!data) return alert(\"error in getAllPlayers\")\n    //   const response = await axios.get(`${API_URL}/${data}`);\n        dispatch(getGamesR(data.data));\n    } catch (err) {\n        throw new Error(err);\n    }\n};\n\nexport const getGameById = (game_id) => async (dispatch) => {\n    try {\n        console.log(game_id, 'game id in dreucers')\n        const data = await request({ url: `/api/games/${game_id}`, method: 'GET' });\n        console.log(data, 'daattaaa')\n        if (!data) return alert(\"error in getGameById\")\n    //   const response = await axios.get(`${API_URL}/${data}`);\n        dispatch(getGameByIdR(data.data));\n    } catch (err) {\n        throw new Error(err);\n    }\n};\n\nexport const createGame = (newGame) => async (dispatch) => {\n    try {\n        const data = await request({ url: '/api/games', method: 'POST', session: newGame});\n        console.log(data, 'data in createGame')\n        if (!data) return alert(\"error in createGame\")\n    //   const response = await axios.get(`${API_URL}/${data}`);\n        dispatch(createGameR(data.data));\n    } catch (err) {\n        throw new Error(err);\n    }\n};\n\n\nexport const editPlayerGameStats = (gamePlayer) => async (dispatch) => {\n    console.log(gamePlayer,' gamePlayer game!!')\n    // try {\n    //     const data = await request({ url: '/api/games', method: 'POST', session: newGame});\n    //     console.log(data, 'data in createGame')\n    //     if (!data) return alert(\"error in createGame\")\n    // //   const response = await axios.get(`${API_URL}/${data}`);\n    //     dispatch(createGameR(data.data));\n    // } catch (err) {\n    //     throw new Error(err);\n    // }\n};\n\nexport const addPlayerGameStats = (playerStats) => async (dispatch) => {\n    console.log(playerStats, 'playerstattsss =====++++')\n    const { game_id, player_id, ...rest } = playerStats;\n    try {\n        const data = await request({ url: `/api/games/${game_id}/${player_id}`, method: 'POST', session: rest});\n        console.log(data, 'data in addPlayerGameStats')\n        if (!data) return alert(\"error in addPlayerGameStats\")\n    //   const response = await axios.get(`${API_URL}/${data}`);\n        // dispatch(createGameR(data.data));\n    } catch (err) {\n        throw new Error(err);\n    }\n}\n  \n\n// Action creators are generated for each case reducer function\nexport const { getGamesR, createGameR, getGameByIdR } = gamesSlice.actions\n\nexport default gamesSlice.reducer"]},"metadata":{},"sourceType":"module"}