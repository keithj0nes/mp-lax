{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { request } from '../../request';\nconst initialState = {\n  players: []\n};\nexport const playersSlice = createSlice({\n  name: 'players',\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nexport const getAllPlayers = data => async dispatch => {\n  try {\n    const data = await request({\n      url: '/api/players',\n      method: 'GET'\n    });\n    console.log(data, 'daattaaa'); //   const response = await axios.get(`${API_URL}/${data}`);\n    //   dispatch(getTodo(response.data));\n  } catch (err) {\n    throw new Error(err);\n  }\n}; // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = playersSlice.actions;\nexport default playersSlice.reducer;","map":{"version":3,"sources":["/Users/keithjones/Documents/development/projects/mp-lax/frontend/src/redux/slices/playersSlice.js"],"names":["createSlice","request","initialState","players","playersSlice","name","reducers","increment","state","value","decrement","incrementByAmount","action","payload","getAllPlayers","data","dispatch","url","method","console","log","err","Error","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,eAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AADU,CAArB;AAIA,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AACtCK,EAAAA,IAAI,EAAE,SADgC;AAEtCH,EAAAA,YAFsC;AAGtCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KAPO;AAQRC,IAAAA,SAAS,EAAGF,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KAVO;AAWRE,IAAAA,iBAAiB,EAAE,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACpCJ,MAAAA,KAAK,CAACC,KAAN,IAAeG,MAAM,CAACC,OAAtB;AACD;AAbO;AAH4B,CAAD,CAAhC;AAqBP,OAAO,MAAMC,aAAa,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACvD,MAAI;AACA,UAAMD,IAAI,GAAG,MAAMd,OAAO,CAAC;AAAEgB,MAAAA,GAAG,EAAE,cAAP;AAAuBC,MAAAA,MAAM,EAAE;AAA/B,KAAD,CAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAAkB,UAAlB,EAFA,CAGJ;AACA;AACC,GALD,CAKE,OAAOM,GAAP,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,CATM,C,CAYP;;AACA,OAAO,MAAM;AAAEd,EAAAA,SAAF;AAAaG,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CP,YAAY,CAACmB,OAAjE;AAEP,eAAenB,YAAY,CAACoB,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { request } from '../../request'\n\nconst initialState = {\n  players: [],\n}\n\nexport const playersSlice = createSlice({\n  name: 'players',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload\n    },\n  },\n})\n\n\nexport const getAllPlayers = (data) => async (dispatch) => {\n    try {\n        const data = await request({ url: '/api/players', method: 'GET' });\n        console.log(data, 'daattaaa')\n    //   const response = await axios.get(`${API_URL}/${data}`);\n    //   dispatch(getTodo(response.data));\n    } catch (err) {\n        throw new Error(err);\n    }\n};\n  \n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = playersSlice.actions\n\nexport default playersSlice.reducer"]},"metadata":{},"sourceType":"module"}