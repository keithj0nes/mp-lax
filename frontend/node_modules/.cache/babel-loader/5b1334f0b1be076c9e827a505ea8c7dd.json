{"ast":null,"code":"var _jsxFileName = \"/Users/keithjones/Documents/development/projects/mp-lax/src/components/Table.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport { ArrowDownIcon } from '@heroicons/react/solid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Table = _ref => {\n  _s();\n\n  var _headers$find;\n\n  let {\n    headers,\n    columns,\n    body,\n    uniqueKey,\n    title\n  } = _ref;\n  const [sortBy, setSortBy] = useState(((_headers$find = headers.find(h => h.default)) === null || _headers$find === void 0 ? void 0 : _headers$find.sort) || null);\n  const [sortDir, setSortDir] = useState('asc'); // useEffect(() => {\n  //     // set ordering if query params exist\n  //     const queryParams = {...router.query};\n  //     // delete queryParams.tab\n  //     if (Object.keys(queryParams).length !== 0) {\n  //         setSortBy(queryParams.orderby);\n  //         setSortDir(queryParams.dir);\n  //     }\n  // }, [])\n\n  const applySort = sortField => {\n    let direction = sortDir === 'asc' ? 'desc' : 'asc';\n\n    if (sortField !== sortBy) {\n      direction = 'asc';\n    }\n\n    console.log(sortField, 'sortField');\n    setSortBy(sortField);\n    setSortDir(direction); // router.push({ query: { ...router.query, orderby: sortField, dir: direction }});\n  };\n\n  const TableSort = _ref2 => {\n    let {\n      label,\n      sort,\n      className\n    } = _ref2;\n    const isSortable = sort !== undefined;\n    const active = sort === sortBy;\n    return /*#__PURE__*/_jsxDEV(\"th\", {\n      className: `p-2 ${className}`,\n      title: label,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => !!sort && applySort(sort),\n        className: classnames(`font-semibold text-left relative`, {\n          'hover:underline cursor-pointer': !!sort\n        }),\n        children: [label, /*#__PURE__*/_jsxDEV(ArrowDownIcon, {\n          className: classnames(`inline h-3 mx-1 absolute top-px text-indigo-500`, {\n            'invisible': !isSortable || !active,\n            'rotate-180': sortDir === 'desc'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  };\n\n  body.sort((a, b) => {\n    // console.log(sortBy, 'sortBysortBysortBysortBy')\n    // console.log(a, b, 'A B')\n    // console.log(a[sortBy], b[sortBy], 'a[sortBy] b[sortBy]')\n    // console.log(typeof a[sortBy], typeof b[sortBy], 'type offfff')\n    // return \n    if (!sortBy) return;\n\n    if (typeof a[sortBy] === 'number' && typeof b[sortBy] === 'number' || typeof a[sortBy] === 'boolean' && typeof b[sortBy] === 'boolean') {\n      if (sortDir === 'asc') {\n        return a[sortBy] - b[sortBy];\n      }\n\n      return b[sortBy] - a[sortBy];\n    }\n\n    if (sortDir === 'asc') {\n      return a[sortBy].localeCompare(b[sortBy]);\n    }\n\n    return b[sortBy].localeCompare(a[sortBy]);\n  });\n\n  const switchType = (type, value, keyValue, item, ind) => {\n    // console.log(type, 'type')\n    switch (type) {\n      case 'number':\n      case 'string':\n      case 'date':\n        return value;\n\n      case 'index':\n        return ind + 1;\n      // case 'math/currency':\n      //     const formatted = variableStringFormatter(value.format, item).replace(/\\s/g, '');\n      //     const splitOnOperators = formatted.match(/[^\\d()]+|[\\d.]+/g);\n      //     const [num1, op, num2] = splitOnOperators;\n      //     let answer\n      //     switch (op) {\n      //         case '*':\n      //             answer = num1 * num2;\n      //             break;\n      //         case '/':\n      //             answer = num1 / num2;\n      //             break;\n      //         case '+':\n      //             answer = num1 + num2;\n      //             break;\n      //         case '-':\n      //             answer = num1 - num2;\n      //             break;\n      //         default:\n      //             break;\n      //     }\n      // console.log(currency(answer))\n      //     return currency(answer)\n      // case 'currency':\n      //     return currency(value);\n\n      case 'boolean':\n        // console.log(type, value, keyValue, 'type value BOOLEAN!!!!')\n        // if (!keyValue) console.warn('Please make sure column is an object with a format key [SortableTable.js boolean]')\n        return !!keyValue ? value.format : null;\n\n      case 'link':\n        // console.log(type, value, keyValue, item, 'type value LINK!!')\n        const href = variableStringFormatter(value.format, item); // console.log(href, 'rhehfhf')\n\n        const as = variableStringFormatter(value.as, item);\n        return /*#__PURE__*/_jsxDEV(Link, {\n          to: href,\n          children: as\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this);\n\n      default:\n        return value;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-span-full xl:col-span-6 bg-white\",\n    children: [title && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-block md:pr-20 border-b border-black mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-bold\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-0\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table-auto w-full\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-xs uppercase text-gray-400 bg-gray-50 rounded-sm border-b border-gray-200\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: headers.map(item => {\n                return /*#__PURE__*/_jsxDEV(TableSort, {\n                  label: item.label,\n                  sort: item.sort,\n                  className: item.className\n                }, item.label, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 41\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"text-sm font-medium divide-y divide-gray-200\",\n            children: body.map((item, ind) => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"hover:bg-gray-50\",\n                children: Object.entries(columns).map(_ref3 => {\n                  let [colKey, colValue] = _ref3;\n                  // console.log(colKey, colValue, 'COL')\n                  let formattedRow;\n\n                  if (typeof colValue === 'object') {\n                    formattedRow = switchType(colValue.type, colValue, item[colKey], item, ind);\n                    return /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: `p-2 ${colValue.className}`,\n                      children: formattedRow\n                    }, colKey, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 189,\n                      columnNumber: 53\n                    }, this);\n                  }\n\n                  formattedRow = switchType(colValue, item[colKey], null, null, ind); // console.log(stuff, 'STUFF!!!')\n\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"p-2\",\n                    children: formattedRow\n                  }, colKey, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 196,\n                    columnNumber: 49\n                  }, this);\n                })\n              }, uniqueKey ? item[uniqueKey] : item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Table, \"GTCWLqJcDvgAoXT2OYTET2X4CxE=\");\n\n_c = Table;\nexport default Table; // this function takes the format string, replaces the $variable_name with the variable passed into the data prop and returns the original string with replaced variables\n// format: '/dashboard/orders/$id'\n\nfunction variableStringFormatter(str, data) {\n  // return str.split(/(?=[\\s.,:;-])|(?<=[\\s.,:;-])/g).map(item => {\n  return str.split(/([\\s()/\\.,:;-])/g).map(item => {\n    if (item.charAt(0) === '$') {\n      return Object.keys(data).map(i => {\n        if (i === item.slice(1)) {\n          return data[i] || '0';\n        }\n\n        return null;\n      }).filter(Boolean);\n    }\n\n    return item;\n  }).join('');\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/Users/keithjones/Documents/development/projects/mp-lax/src/components/Table.js"],"names":["useState","useEffect","Link","classnames","ArrowDownIcon","Table","headers","columns","body","uniqueKey","title","sortBy","setSortBy","find","h","default","sort","sortDir","setSortDir","applySort","sortField","direction","console","log","TableSort","label","className","isSortable","undefined","active","a","b","localeCompare","switchType","type","value","keyValue","item","ind","format","href","variableStringFormatter","as","map","Object","entries","colKey","colValue","formattedRow","id","str","data","split","charAt","keys","i","slice","filter","Boolean","join"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport { ArrowDownIcon } from '@heroicons/react/solid';\n\n\nconst Table = ({ headers, columns, body, uniqueKey, title }) => {\n\n    const [sortBy, setSortBy] = useState(headers.find(h => h.default)?.sort || null);\n    const [sortDir, setSortDir] = useState('asc');\n\n    // useEffect(() => {\n    //     // set ordering if query params exist\n    //     const queryParams = {...router.query};\n    //     // delete queryParams.tab\n\n    //     if (Object.keys(queryParams).length !== 0) {\n    //         setSortBy(queryParams.orderby);\n    //         setSortDir(queryParams.dir);\n    //     }\n    // }, [])\n\n    const applySort = (sortField) => {\n        let direction = sortDir === 'asc' ? 'desc' : 'asc'\n        if (sortField !== sortBy) {\n            direction = 'asc'\n        }\n        console.log(sortField, 'sortField')\n        setSortBy(sortField);\n        setSortDir(direction);\n\n        // router.push({ query: { ...router.query, orderby: sortField, dir: direction }});\n    }\n\n\n    const TableSort = ({ label, sort, className }) => {\n        const isSortable = sort !== undefined;\n        const active = sort === sortBy;\n        return (\n            <th className={`p-2 ${className}`} title={label}>\n                <div\n                    onClick={() => !!sort && applySort(sort)}\n                    className={classnames(\n                        `font-semibold text-left relative`,\n                        {\n                            'hover:underline cursor-pointer': !!sort,\n                        }\n                    )} \n                >\n                    {label}\n\n                    <ArrowDownIcon className={classnames(\n                        `inline h-3 mx-1 absolute top-px text-indigo-500`,\n                        {\n                            'invisible': !isSortable || !active,\n                            'rotate-180': sortDir === 'desc',\n                        }\n                        )} \n                    />\n                </div> \n            </th>\n        )\n    }\n\n    body.sort((a, b) => {\n        // console.log(sortBy, 'sortBysortBysortBysortBy')\n        // console.log(a, b, 'A B')\n        // console.log(a[sortBy], b[sortBy], 'a[sortBy] b[sortBy]')\n        // console.log(typeof a[sortBy], typeof b[sortBy], 'type offfff')\n        // return \n        if (!sortBy) return;\n        if (\n            (typeof a[sortBy] === 'number' && typeof b[sortBy] === 'number') ||\n            (typeof a[sortBy] === 'boolean' && typeof b[sortBy] === 'boolean')\n        ) {\n            if (sortDir === 'asc') {\n                return a[sortBy] - b[sortBy]\n            }\n            return b[sortBy] - a[sortBy]\n        }\n\n        if (sortDir === 'asc') {\n            return a[sortBy].localeCompare(b[sortBy])\n        }\n        return b[sortBy].localeCompare(a[sortBy])\n    })\n\n\n    const switchType = (type, value, keyValue, item, ind) => {\n        // console.log(type, 'type')\n        \n        switch (type) {\n            case 'number':\n            case 'string':\n            case 'date':\n                return value;\n            case 'index':\n                return ind + 1;\n            // case 'math/currency':\n            //     const formatted = variableStringFormatter(value.format, item).replace(/\\s/g, '');\n            //     const splitOnOperators = formatted.match(/[^\\d()]+|[\\d.]+/g);\n            //     const [num1, op, num2] = splitOnOperators;\n            //     let answer\n            //     switch (op) {\n            //         case '*':\n            //             answer = num1 * num2;\n            //             break;\n            //         case '/':\n            //             answer = num1 / num2;\n            //             break;\n            //         case '+':\n            //             answer = num1 + num2;\n            //             break;\n            //         case '-':\n            //             answer = num1 - num2;\n            //             break;\n            //         default:\n            //             break;\n            //     }\n\n                // console.log(currency(answer))\n            //     return currency(answer)\n            // case 'currency':\n            //     return currency(value);\n            case 'boolean':\n            // console.log(type, value, keyValue, 'type value BOOLEAN!!!!')\n                // if (!keyValue) console.warn('Please make sure column is an object with a format key [SortableTable.js boolean]')\n                return !!keyValue ? value.format : null;\n            case 'link':\n                // console.log(type, value, keyValue, item, 'type value LINK!!')\n                const href = variableStringFormatter(value.format, item)\n\n                // console.log(href, 'rhehfhf')\n                const as = variableStringFormatter(value.as, item)\n\n                return (\n                    <Link to={href}>\n                        {/* <a className=\"text-xs hover:text-gray-800 transition duration-200 underline\" href=\"\"> */}\n                            {as}\n                            {/* </a> */}\n                    </Link>\n                );\n            default:\n                return value;    \n                \n        }\n    }\n\n    return (\n        <div className=\"col-span-full xl:col-span-6 bg-white\">\n            {title && (\n                <>\n                    {/* <div className=\"px-5 py-4 border-b border-gray-200 bg-emerald-200\">\n                        <h2 className=\"font-semibold text-gray-800\">{title} - (custom table)</h2>\n                    </div> */}\n\n                    <div className=\"inline-block md:pr-20 border-b border-black mb-4\">\n                        <h3 className=\"text-lg font-bold\">{title}</h3>\n                    </div>\n                </>\n            )}\n        {/* <h2>Sortable Table component</h2> */}\n\n            {/* <div className=\"p-3\"> */}\n            <div className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                    <table className=\"table-auto w-full\">\n                        <thead className=\"text-xs uppercase text-gray-400 bg-gray-50 rounded-sm border-b border-gray-200\">\n                            <tr>\n                                {headers.map(item => {\n                                    return (\n                                        <TableSort label={item.label} sort={item.sort} className={item.className} key={item.label} />\n                                    )\n                                })}\n                            </tr>\n                        </thead>\n\n                        <tbody className=\"text-sm font-medium divide-y divide-gray-200\">\n\n                            {body.map((item, ind) => {\n                                return (\n                                    <tr key={uniqueKey ? item[uniqueKey] :item.id} className=\"hover:bg-gray-50\">\n                                        {Object.entries(columns).map(([colKey, colValue]) => {\n                                            // console.log(colKey, colValue, 'COL')\n                                            let formattedRow;\n                                            if (typeof colValue === 'object') {\n                                                formattedRow = switchType(colValue.type, colValue, item[colKey], item, ind)\n                                                return (\n                                                    <td className={`p-2 ${colValue.className}`} key={colKey}>{formattedRow}</td>\n                                                )\n                                            } \n\n                                            formattedRow = switchType(colValue, item[colKey], null, null, ind);\n                                            // console.log(stuff, 'STUFF!!!')\n                                            return (\n                                                <td className=\"p-2\" key={colKey}>{formattedRow}</td>\n                                            )\n                                        })}\n                                    </tr>\n                                )\n                            })}\n                        </tbody>                        \n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Table;\n\n// this function takes the format string, replaces the $variable_name with the variable passed into the data prop and returns the original string with replaced variables\n// format: '/dashboard/orders/$id'\n\nfunction variableStringFormatter(str, data) {\n    // return str.split(/(?=[\\s.,:;-])|(?<=[\\s.,:;-])/g).map(item => {\n    return str.split(/([\\s()/\\.,:;-])/g).map(item => {\n        if (item.charAt(0) === '$') {\n            return Object.keys(data).map(i => {\n                if (i === item.slice(1)) {\n                    return data[i] || '0';\n                }\n                return null;\n            }).filter(Boolean);\n        }\n        return item;\n    }).join('');\n}\n\n"]},"metadata":{},"sourceType":"module"}