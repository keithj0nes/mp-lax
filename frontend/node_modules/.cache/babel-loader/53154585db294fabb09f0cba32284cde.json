{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { request } from '../../request';\nconst initialState = {\n  players: []\n};\nexport const playersSlice = createSlice({\n  name: 'players',\n  initialState,\n  reducers: {\n    getPlayersR: (state, action) => {\n      console.log(action, ' acfctiotnn'); // state.players.push(action.payload)\n      // return { ...state, players: action.payload }\n\n      state.players = action.payload;\n    },\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nexport const getAllPlayers = data => async dispatch => {\n  try {\n    const data = await request({\n      url: '/api/players',\n      method: 'GET'\n    });\n    console.log(data, 'daattaaa');\n    if (!data) return alert(\"error in getAllPlayers\"); //   const response = await axios.get(`${API_URL}/${data}`);\n\n    dispatch(getPlayersR(data.data));\n  } catch (err) {\n    throw new Error(err);\n  }\n}; // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  getPlayersR\n} = playersSlice.actions;\nexport default playersSlice.reducer;","map":{"version":3,"sources":["/Users/keithjones/Documents/development/projects/mp-lax/frontend/src/redux/slices/playersSlice.js"],"names":["createSlice","request","initialState","players","playersSlice","name","reducers","getPlayersR","state","action","console","log","payload","increment","value","decrement","incrementByAmount","getAllPlayers","data","dispatch","url","method","alert","err","Error","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,eAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AADU,CAArB;AAIA,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AACpCK,EAAAA,IAAI,EAAE,SAD8B;AAEpCH,EAAAA,YAFoC;AAGpCI,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAmB,aAAnB,EAD4B,CAE5B;AACA;;AACAD,MAAAA,KAAK,CAACL,OAAN,GAAgBM,MAAM,CAACG,OAAvB;AACH,KANK;AAONC,IAAAA,SAAS,EAAGL,KAAD,IAAW;AAClB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACM,KAAN,IAAe,CAAf;AACH,KAbK;AAcNC,IAAAA,SAAS,EAAGP,KAAD,IAAW;AAClBA,MAAAA,KAAK,CAACM,KAAN,IAAe,CAAf;AACH,KAhBK;AAiBNE,IAAAA,iBAAiB,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAClCD,MAAAA,KAAK,CAACM,KAAN,IAAeL,MAAM,CAACG,OAAtB;AACH;AAnBK;AAH0B,CAAD,CAAhC;AA2BP,OAAO,MAAMK,aAAa,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACvD,MAAI;AACA,UAAMD,IAAI,GAAG,MAAMjB,OAAO,CAAC;AAAEmB,MAAAA,GAAG,EAAE,cAAP;AAAuBC,MAAAA,MAAM,EAAE;AAA/B,KAAD,CAA1B;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ,EAAkB,UAAlB;AACA,QAAI,CAACA,IAAL,EAAW,OAAOI,KAAK,CAAC,wBAAD,CAAZ,CAHX,CAIJ;;AACIH,IAAAA,QAAQ,CAACZ,WAAW,CAACW,IAAI,CAACA,IAAN,CAAZ,CAAR;AACH,GAND,CAME,OAAOK,GAAP,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,CAVM,C,CAaP;;AACA,OAAO,MAAM;AAAEV,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA,iBAAxB;AAA2CT,EAAAA;AAA3C,IAA2DH,YAAY,CAACqB,OAA9E;AAEP,eAAerB,YAAY,CAACsB,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { request } from '../../request'\n\nconst initialState = {\n  players: [],\n}\n\nexport const playersSlice = createSlice({\n    name: 'players',\n    initialState,\n    reducers: {\n        getPlayersR: (state, action) => {\n            console.log(action,' acfctiotnn')\n            // state.players.push(action.payload)\n            // return { ...state, players: action.payload }\n            state.players = action.payload;\n        },\n        increment: (state) => {\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n            // doesn't actually mutate the state because it uses the Immer library,\n            // which detects changes to a \"draft state\" and produces a brand new\n            // immutable state based off those changes\n            state.value += 1\n        },\n        decrement: (state) => {\n            state.value -= 1\n        },\n        incrementByAmount: (state, action) => {\n            state.value += action.payload\n        },\n    },\n})\n\n\nexport const getAllPlayers = (data) => async (dispatch) => {\n    try {\n        const data = await request({ url: '/api/players', method: 'GET' });\n        console.log(data, 'daattaaa')\n        if (!data) return alert(\"error in getAllPlayers\")\n    //   const response = await axios.get(`${API_URL}/${data}`);\n        dispatch(getPlayersR(data.data));\n    } catch (err) {\n        throw new Error(err);\n    }\n};\n  \n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount, getPlayersR } = playersSlice.actions\n\nexport default playersSlice.reducer"]},"metadata":{},"sourceType":"module"}