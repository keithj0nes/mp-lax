{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { request } from '../../request';\nconst initialState = {\n  games: [],\n  game: {},\n  singleGameLoading: true,\n  isLoading: false\n};\nexport const gamesSlice = createSlice({\n  name: 'games',\n  initialState,\n  reducers: {\n    setIsLoadingR: (state, action) => {\n      state.isLoading = action.payload === undefined ? true : action.payload;\n    },\n    setSingleGameLoadingR: (state, action) => {\n      state.singleGameLoading = true;\n    },\n    getGamesR: (state, action) => {\n      state.games = action.payload;\n    },\n    getGameByIdR: (state, action) => {\n      state.game = action.payload;\n      state.singleGameLoading = false;\n    },\n    createGameR: (state, action) => {\n      state.games = [...state.games, action.payload];\n      state.isLoading = false;\n    },\n    addPlayerGameStatsR: (state, action) => {\n      state.game = { ...state.game,\n        player_stats: [...state.game.player_stats, action.payload]\n      };\n    },\n    updatePlayerGameStatsR: (state, action) => {\n      const player_stats = state.game.player_stats.map(item => {\n        if (item.player_id === action.payload.player_id) {\n          return action.payload;\n        }\n\n        return item;\n      });\n      state.game = { ...state.game,\n        player_stats\n      };\n    }\n  }\n});\nexport const getAllGames = () => async dispatch => {\n  try {\n    const data = await request({\n      url: '/api/games',\n      method: 'GET'\n    });\n    console.log(data, 'daattaaa');\n    if (!data) return alert(\"error in getAllPlayers\"); //   const response = await axios.get(`${API_URL}/${data}`);\n\n    dispatch(getGamesR(data.data));\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nexport const getGameById = game_id => async dispatch => {\n  try {\n    const data = await request({\n      url: `/api/games/${game_id}`,\n      method: 'GET'\n    }); // console.log(data, 'daattaaa')\n\n    if (!data) return alert(\"error in getGameById\"); //   const response = await axios.get(`${API_URL}/${data}`);\n\n    dispatch(getGameByIdR(data.data));\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\nconst wait = t => new Promise(resolve => setTimeout(resolve, t));\n\nexport const createGame = newGame => async dispatch => {\n  dispatch(setIsLoadingR());\n  await wait(3000);\n  dispatch(setIsLoadingR(false)); // return true;\n  // try {\n  //     const data = await request({ url: '/api/games', method: 'POST', session: newGame});\n  //     console.log(data, 'data in createGame')\n  //     if (!data) return alert(\"error in createGame\")\n  // //   const response = await axios.get(`${API_URL}/${data}`);\n  //     dispatch(createGameR(data.data));\n  // } catch (err) {\n  //     throw new Error(err);\n  // }\n};\nexport const updatePlayerGameStats = playerStats => async dispatch => {\n  console.log(playerStats, ' playerStats game!!');\n  const {\n    game_id,\n    player_id,\n    ...rest\n  } = playerStats;\n\n  try {\n    const data = await request({\n      url: `/api/games/${game_id}/${player_id}`,\n      method: 'PUT',\n      session: rest\n    });\n    console.log(data, 'data in updatePlayerGameStats');\n    if (!data) return alert(\"error in updatePlayerGameStats\"); //   const response = await axios.get(`${API_URL}/${data}`);\n\n    dispatch(updatePlayerGameStatsR(data.data));\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nexport const addPlayerGameStats = playerStats => async dispatch => {\n  console.log(playerStats, 'playerstattsss =====++++');\n  const {\n    game_id,\n    player_id,\n    ...rest\n  } = playerStats;\n\n  try {\n    const data = await request({\n      url: `/api/games/${game_id}/${player_id}`,\n      method: 'POST',\n      session: rest\n    });\n    console.log(data, 'data in addPlayerGameStats');\n    if (!data) return alert(\"error in addPlayerGameStats\");\n    dispatch(addPlayerGameStatsR(data.data));\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nexport const quickAddPlayersToGame = players => async dispatch => {\n  console.log(players, 'players ====== quickAddPlayersToGame ');\n  dispatch(setSingleGameLoadingR()); // const { game_id, player_id, ...rest } = playerStats;\n  // try {\n  //     const data = await request({ url: `/api/games/${game_id}/${player_id}`, method: 'POST', session: rest});\n  //     console.log(data, 'data in addPlayerGameStats')\n  //     if (!data) return alert(\"error in addPlayerGameStats\")\n  //     dispatch(addPlayerGameStatsR(data.data));\n  // } catch (err) {\n  //     throw new Error(err);\n  // }\n}; // Action creators are generated for each case reducer function\n\nexport const {\n  getGamesR,\n  createGameR,\n  getGameByIdR,\n  addPlayerGameStatsR,\n  updatePlayerGameStatsR,\n  setSingleGameLoadingR,\n  setIsLoadingR\n} = gamesSlice.actions;\nexport default gamesSlice.reducer;","map":{"version":3,"sources":["/Users/keithjones/Documents/development/projects/mp-lax/frontend/src/redux/slices/gamesSlice.js"],"names":["createSlice","request","initialState","games","game","singleGameLoading","isLoading","gamesSlice","name","reducers","setIsLoadingR","state","action","payload","undefined","setSingleGameLoadingR","getGamesR","getGameByIdR","createGameR","addPlayerGameStatsR","player_stats","updatePlayerGameStatsR","map","item","player_id","getAllGames","dispatch","data","url","method","console","log","alert","err","Error","getGameById","game_id","wait","t","Promise","resolve","setTimeout","createGame","newGame","updatePlayerGameStats","playerStats","rest","session","addPlayerGameStats","quickAddPlayersToGame","players","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { request } from '../../request'\n\nconst initialState = {\n  games: [],\n  game: {},\n  singleGameLoading: true,\n  isLoading: false,\n}\n\nexport const gamesSlice = createSlice({\n    name: 'games',\n    initialState,\n    reducers: {\n        setIsLoadingR: (state, action) => {\n            state.isLoading = action.payload === undefined ? true : action.payload;\n        },\n        setSingleGameLoadingR: (state, action) => {\n            state.singleGameLoading = true;\n        },\n        getGamesR: (state, action) => {\n            state.games = action.payload;\n        },\n        getGameByIdR: (state, action) => {\n            state.game = action.payload;\n            state.singleGameLoading = false;\n        },\n        createGameR: (state, action) => {\n            state.games = [...state.games, action.payload];\n            state.isLoading = false;\n        },\n        addPlayerGameStatsR: (state, action) => {\n            state.game = {...state.game, player_stats: [...state.game.player_stats, action.payload]}\n        },\n        updatePlayerGameStatsR: (state, action) => {\n            const player_stats = state.game.player_stats.map(item => {\n                if (item.player_id === action.payload.player_id) {\n                    return action.payload\n                }\n                return item;\n            })\n            state.game = { ...state.game, player_stats }\n        },\n    },\n})\n\n\nexport const getAllGames = () => async (dispatch) => {\n    try {\n        const data = await request({ url: '/api/games', method: 'GET' });\n        console.log(data, 'daattaaa')\n        if (!data) return alert(\"error in getAllPlayers\")\n    //   const response = await axios.get(`${API_URL}/${data}`);\n        dispatch(getGamesR(data.data));\n    } catch (err) {\n        throw new Error(err);\n    }\n};\n\nexport const getGameById = (game_id) => async (dispatch) => {\n    try {\n        const data = await request({ url: `/api/games/${game_id}`, method: 'GET' });\n        // console.log(data, 'daattaaa')\n        if (!data) return alert(\"error in getGameById\")\n    //   const response = await axios.get(`${API_URL}/${data}`);\n        dispatch(getGameByIdR(data.data));\n    } catch (err) {\n        throw new Error(err);\n    }\n};\nconst wait = t => new Promise(resolve => setTimeout(resolve, t));\n\nexport const createGame = (newGame) => async (dispatch) => {\n    dispatch(setIsLoadingR());\n\n    await wait(3000);\n\n    dispatch(setIsLoadingR(false));\n    // return true;\n\n    // try {\n    //     const data = await request({ url: '/api/games', method: 'POST', session: newGame});\n    //     console.log(data, 'data in createGame')\n    //     if (!data) return alert(\"error in createGame\")\n    // //   const response = await axios.get(`${API_URL}/${data}`);\n    //     dispatch(createGameR(data.data));\n    // } catch (err) {\n    //     throw new Error(err);\n    // }\n};\n\n\nexport const updatePlayerGameStats = (playerStats) => async (dispatch) => {\n    console.log(playerStats,' playerStats game!!')\n    const { game_id, player_id, ...rest } = playerStats;\n\n    try {\n        const data = await request({ url: `/api/games/${game_id}/${player_id}`, method: 'PUT', session: rest});\n        console.log(data, 'data in updatePlayerGameStats')\n        if (!data) return alert(\"error in updatePlayerGameStats\")\n    //   const response = await axios.get(`${API_URL}/${data}`);\n        dispatch(updatePlayerGameStatsR(data.data));\n    } catch (err) {\n        throw new Error(err);\n    }\n};\n\nexport const addPlayerGameStats = (playerStats) => async (dispatch) => {\n    console.log(playerStats, 'playerstattsss =====++++')\n    const { game_id, player_id, ...rest } = playerStats;\n    try {\n        const data = await request({ url: `/api/games/${game_id}/${player_id}`, method: 'POST', session: rest});\n        console.log(data, 'data in addPlayerGameStats')\n        if (!data) return alert(\"error in addPlayerGameStats\")\n        dispatch(addPlayerGameStatsR(data.data));\n    } catch (err) {\n        throw new Error(err);\n    }\n}\n\nexport const quickAddPlayersToGame = (players) => async (dispatch) => {\n    console.log(players, 'players ====== quickAddPlayersToGame ')\n\n    dispatch(setSingleGameLoadingR())\n    // const { game_id, player_id, ...rest } = playerStats;\n    // try {\n    //     const data = await request({ url: `/api/games/${game_id}/${player_id}`, method: 'POST', session: rest});\n    //     console.log(data, 'data in addPlayerGameStats')\n    //     if (!data) return alert(\"error in addPlayerGameStats\")\n    //     dispatch(addPlayerGameStatsR(data.data));\n    // } catch (err) {\n    //     throw new Error(err);\n    // }\n}\n  \n\n// Action creators are generated for each case reducer function\nexport const { getGamesR, createGameR, getGameByIdR, addPlayerGameStatsR, updatePlayerGameStatsR, setSingleGameLoadingR, setIsLoadingR } = gamesSlice.actions\nexport default gamesSlice.reducer"]},"metadata":{},"sourceType":"module"}