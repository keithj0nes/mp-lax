{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  players: []\n};\nexport const playersSlice = createSlice({\n  name: 'players',\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = playersSlice.actions;\nexport default playersSlice.reducer;","map":{"version":3,"sources":["/Users/keithjones/Documents/development/projects/mp-lax/frontend/src/redux/slices/playersSlice.js"],"names":["createSlice","initialState","players","playersSlice","name","reducers","increment","state","value","decrement","incrementByAmount","action","payload","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AADU,CAArB;AAIA,OAAO,MAAMC,YAAY,GAAGH,WAAW,CAAC;AACtCI,EAAAA,IAAI,EAAE,SADgC;AAEtCH,EAAAA,YAFsC;AAGtCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KAPO;AAQRC,IAAAA,SAAS,EAAGF,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KAVO;AAWRE,IAAAA,iBAAiB,EAAE,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACpCJ,MAAAA,KAAK,CAACC,KAAN,IAAeG,MAAM,CAACC,OAAtB;AACD;AAbO;AAH4B,CAAD,CAAhC,C,CAoBP;;AACA,OAAO,MAAM;AAAEN,EAAAA,SAAF;AAAaG,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CP,YAAY,CAACU,OAAjE;AAEP,eAAeV,YAAY,CAACW,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  players: [],\n}\n\nexport const playersSlice = createSlice({\n  name: 'players',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload\n    },\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = playersSlice.actions\n\nexport default playersSlice.reducer"]},"metadata":{},"sourceType":"module"}