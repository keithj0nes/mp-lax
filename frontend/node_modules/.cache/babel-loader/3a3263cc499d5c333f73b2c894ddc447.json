{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from 'react';\nexport default function useForm() {\n  _s();\n\n  let initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [fields, setFields] = useState(initialState);\n  const [errors, setErrors] = useState({});\n  const initalValues = Object.values(initialState).join('');\n  useEffect(() => {\n    setFields(initialState);\n  }, [initalValues]);\n\n  const handleChange = (e, key) => {\n    console.log(e.target.attributes.maxlength.value, 'eeee'); // console.log(key, 'keeeyy')\n\n    let {\n      value,\n      name,\n      type,\n      files,\n      checked\n    } = e.target; // console.log(type, name, checked, value, 'TYPEEEE')\n\n    if (type === 'number') {\n      console.log(value.maxlength, 'value');\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      [value] = files;\n    }\n\n    if (key) {\n      return setFields({ ...fields,\n        [key]: { ...fields[key],\n          [name]: {\n            value: type === 'checkbox' ? checked : value\n          }\n        }\n      });\n    }\n\n    setFields({ ...fields,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n\n  const validate = validations => {\n    let valid = true;\n    const newErrors = {};\n\n    for (const key in validations) {\n      var _validation$required;\n\n      // value of the field we're validating\n      const value = fields[key]; // the matching validation rule for this key\n\n      const validation = validations[key]; // REQUIRED\n\n      if ((validation === null || validation === void 0 ? void 0 : (_validation$required = validation.required) === null || _validation$required === void 0 ? void 0 : _validation$required.value) !== false && !value) {\n        var _validation$required2;\n\n        valid = false;\n        newErrors[key] = validation === null || validation === void 0 ? void 0 : (_validation$required2 = validation.required) === null || _validation$required2 === void 0 ? void 0 : _validation$required2.message;\n      } // PATTERN\n\n\n      const pattern = validation === null || validation === void 0 ? void 0 : validation.pattern;\n      console.log(pattern === null || pattern === void 0 ? void 0 : pattern.value, 'RegExp(pattern.value).test(value)');\n\n      if (pattern !== null && pattern !== void 0 && pattern.value && !RegExp(pattern.value).test(value)) {\n        valid = false;\n        newErrors[key] = pattern.message;\n      } // CUSTOM\n\n\n      const custom = validation === null || validation === void 0 ? void 0 : validation.custom;\n\n      if (custom !== null && custom !== void 0 && custom.isValid && !custom.isValid(value)) {\n        valid = false;\n        newErrors[key] = custom.message;\n      }\n    }\n\n    console.log(newErrors, 'newErrors');\n\n    if (!valid) {\n      setErrors(newErrors);\n      return false;\n    }\n\n    setErrors(newErrors);\n    return true;\n  };\n\n  const resetForm = () => {\n    setFields(initialState);\n  };\n\n  const clearForm = () => {\n    const clearedState = Object.fromEntries(Object.entries(fields).map(_ref => {\n      let [key, value] = _ref;\n      return [key, ''];\n    }));\n    setFields(clearedState);\n  };\n\n  return {\n    fields,\n    handleChange,\n    resetForm,\n    clearForm,\n    errors,\n    validate\n  };\n}\n\n_s(useForm, \"xfKN+RLE7JZjaIjsJ3NBd7E7rZQ=\");","map":{"version":3,"sources":["/Users/keithjones/Documents/development/projects/mp-lax/src/hooks/useForm.js"],"names":["useEffect","useState","useForm","initialState","fields","setFields","errors","setErrors","initalValues","Object","values","join","handleChange","e","key","console","log","target","attributes","maxlength","value","name","type","files","checked","parseInt","validate","validations","valid","newErrors","validation","required","message","pattern","RegExp","test","custom","isValid","resetForm","clearForm","clearedState","fromEntries","entries","map"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from 'react';\n\nexport default function useForm(initialState = {}) {\n    const [fields, setFields] = useState(initialState);\n    const [errors, setErrors] = useState({});\n    const initalValues = Object.values(initialState).join('');\n\n    useEffect(() => {\n        setFields(initialState);\n    }, [initalValues]);\n\n    const handleChange = (e, key) => {\n        console.log(e.target.attributes.maxlength.value, 'eeee')\n        // console.log(key, 'keeeyy')\n        let { value, name, type, files, checked } = e.target;\n\n        // console.log(type, name, checked, value, 'TYPEEEE')\n\n        if (type === 'number') {\n            console.log(value.maxlength, 'value')\n            value = parseInt(value);\n        }\n        if (type === 'file') {\n            [value] = files;\n        }\n\n        if (key) {\n            return setFields({\n                ...fields,\n                [key]: {\n                    ...fields[key],\n                    [name]: {value: type === 'checkbox' ? checked : value },\n                }\n            });\n        }\n\n        setFields({\n            ...fields,\n            [name]: type === 'checkbox' ? checked : value,\n        });\n    };\n\n    const validate = (validations) => {\n        let valid = true;\n        const newErrors = {};\n        for (const key in validations) {\n            // value of the field we're validating\n            const value = fields[key];\n            // the matching validation rule for this key\n            const validation = validations[key];\n            // REQUIRED\n            if (validation?.required?.value !== false && !value) {\n                valid = false;\n                newErrors[key] = validation?.required?.message;\n            }\n            // PATTERN\n            const pattern = validation?.pattern;\n\n            console.log(pattern?.value, 'RegExp(pattern.value).test(value)')\n            if (pattern?.value && !RegExp(pattern.value).test(value)) {\n                valid = false;\n                newErrors[key] = pattern.message;\n            }\n            // CUSTOM\n            const custom = validation?.custom;\n            if (custom?.isValid && !custom.isValid(value)) {\n                valid = false;\n                newErrors[key] = custom.message;\n            }\n        }\n\n        console.log(newErrors, 'newErrors')\n\n        if (!valid) {\n            setErrors(newErrors);\n            return false;\n        }\n        setErrors(newErrors);\n        return true;\n    }\n\n    const resetForm = () => {\n        setFields(initialState);\n    };\n\n    const clearForm = () => {\n        const clearedState = Object.fromEntries(\n            Object.entries(fields).map(([key, value]) => [key, '']),\n        );\n        setFields(clearedState);\n    };\n\n    return { fields, handleChange, resetForm, clearForm, errors, validate };\n}\n"]},"metadata":{},"sourceType":"module"}