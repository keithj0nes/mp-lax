{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { request } from '../../request';\nconst initialState = {\n  games: []\n};\nexport const gamesSlice = createSlice({\n  name: 'games',\n  initialState,\n  reducers: {\n    getGamesR: (state, action) => {\n      state.games = action.payload;\n    } // createPlayerR: (state, action) => {\n    //     state.players = [...state.players, action.payload]\n    // },\n\n  }\n});\nexport const getAllGames = () => async dispatch => {\n  try {\n    const data = await request({\n      url: '/api/games',\n      method: 'GET'\n    });\n    console.log(data, 'daattaaa');\n    if (!data) return alert(\"error in getAllPlayers\"); //   const response = await axios.get(`${API_URL}/${data}`);\n\n    dispatch(getGamesR(data.data));\n  } catch (err) {\n    throw new Error(err);\n  }\n}; // export const createPlayer = (newPlayer) => async (dispatch) => {\n//     try {\n//         const data = await request({ url: '/api/players', method: 'POST', session: newPlayer});\n//         console.log(data, 'data in createPlayer')\n//         if (!data) return alert(\"error in createPlayer\")\n//     //   const response = await axios.get(`${API_URL}/${data}`);\n//         dispatch(createPlayerR(data.data));\n//     } catch (err) {\n//         throw new Error(err);\n//     }\n// };\n// Action creators are generated for each case reducer function\n\nexport const {\n  getGamesR\n} = gamesSlice.actions;\nexport default gamesSlice.reducer;","map":{"version":3,"sources":["/Users/keithjones/Documents/development/projects/mp-lax/frontend/src/redux/slices/gamesSlices.js"],"names":["createSlice","request","initialState","games","gamesSlice","name","reducers","getGamesR","state","action","payload","getAllGames","dispatch","data","url","method","console","log","alert","err","Error","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,eAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,OAAO,MAAMC,UAAU,GAAGJ,WAAW,CAAC;AAClCK,EAAAA,IAAI,EAAE,OAD4B;AAElCH,EAAAA,YAFkC;AAGlCI,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACH,KAHK,CAIN;AACA;AACA;;AANM;AAHwB,CAAD,CAA9B;AAcP,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACjD,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMZ,OAAO,CAAC;AAAEa,MAAAA,GAAG,EAAE,YAAP;AAAqBC,MAAAA,MAAM,EAAE;AAA7B,KAAD,CAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkB,UAAlB;AACA,QAAI,CAACA,IAAL,EAAW,OAAOK,KAAK,CAAC,wBAAD,CAAZ,CAHX,CAIJ;;AACIN,IAAAA,QAAQ,CAACL,SAAS,CAACM,IAAI,CAACA,IAAN,CAAV,CAAR;AACH,GAND,CAME,OAAOM,GAAP,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,CAVM,C,CAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA,OAAO,MAAM;AAAEZ,EAAAA;AAAF,IAAgBH,UAAU,CAACiB,OAAjC;AAEP,eAAejB,UAAU,CAACkB,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { request } from '../../request'\n\nconst initialState = {\n  games: [],\n}\n\nexport const gamesSlice = createSlice({\n    name: 'games',\n    initialState,\n    reducers: {\n        getGamesR: (state, action) => {\n            state.games = action.payload;\n        },\n        // createPlayerR: (state, action) => {\n        //     state.players = [...state.players, action.payload]\n        // },\n    },\n})\n\n\nexport const getAllGames = () => async (dispatch) => {\n    try {\n        const data = await request({ url: '/api/games', method: 'GET' });\n        console.log(data, 'daattaaa')\n        if (!data) return alert(\"error in getAllPlayers\")\n    //   const response = await axios.get(`${API_URL}/${data}`);\n        dispatch(getGamesR(data.data));\n    } catch (err) {\n        throw new Error(err);\n    }\n};\n\n// export const createPlayer = (newPlayer) => async (dispatch) => {\n//     try {\n//         const data = await request({ url: '/api/players', method: 'POST', session: newPlayer});\n//         console.log(data, 'data in createPlayer')\n//         if (!data) return alert(\"error in createPlayer\")\n//     //   const response = await axios.get(`${API_URL}/${data}`);\n//         dispatch(createPlayerR(data.data));\n//     } catch (err) {\n//         throw new Error(err);\n//     }\n// };\n  \n\n// Action creators are generated for each case reducer function\nexport const { getGamesR } = gamesSlice.actions\n\nexport default gamesSlice.reducer"]},"metadata":{},"sourceType":"module"}