{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { request } from '../../request';\nconst initialState = {\n  players: []\n};\nexport const playersSlice = createSlice({\n  name: 'players',\n  initialState,\n  reducers: {\n    getPlayersR: (state, action) => {\n      state.players = action.payload;\n    },\n    createPlayerR: (state, action) => {\n      state.players = [...state.players, action.payload];\n    },\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nexport const getAllPlayers = () => async dispatch => {\n  try {\n    const data = await request({\n      url: '/api/players',\n      method: 'GET'\n    });\n    console.log(data, 'daattaaa');\n    if (!data) return alert(\"error in getAllPlayers\"); //   const response = await axios.get(`${API_URL}/${data}`);\n\n    dispatch(getPlayersR(data.data));\n  } catch (err) {\n    throw new Error(err);\n  }\n};\nexport const createPlayer = newPlayer => async dispatch => {\n  try {\n    const data = await request({\n      url: '/api/players',\n      method: 'POST',\n      session: newPlayer\n    });\n    console.log(data, 'data in createPlayer');\n    if (!data) return alert(\"error in createPlayer\"); //   const response = await axios.get(`${API_URL}/${data}`);\n\n    dispatch(createPlayerR(data.data));\n  } catch (err) {\n    throw new Error(err);\n  }\n}; // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount,\n  getPlayersR,\n  createPlayerR\n} = playersSlice.actions;\nexport default playersSlice.reducer;","map":{"version":3,"sources":["/Users/keithjones/Documents/development/projects/mp-lax/frontend/src/redux/slices/playersSlice.js"],"names":["createSlice","request","initialState","players","playersSlice","name","reducers","getPlayersR","state","action","payload","createPlayerR","increment","value","decrement","incrementByAmount","getAllPlayers","dispatch","data","url","method","console","log","alert","err","Error","createPlayer","newPlayer","session","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,eAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AADU,CAArB;AAIA,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AACpCK,EAAAA,IAAI,EAAE,SAD8B;AAEpCH,EAAAA,YAFoC;AAGpCI,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACL,OAAN,GAAgBM,MAAM,CAACC,OAAvB;AACH,KAHK;AAINC,IAAAA,aAAa,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACL,OAAN,GAAgB,CAAC,GAAGK,KAAK,CAACL,OAAV,EAAmBM,MAAM,CAACC,OAA1B,CAAhB;AACH,KANK;AAONE,IAAAA,SAAS,EAAGJ,KAAD,IAAW;AAClB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACK,KAAN,IAAe,CAAf;AACH,KAbK;AAcNC,IAAAA,SAAS,EAAGN,KAAD,IAAW;AAClBA,MAAAA,KAAK,CAACK,KAAN,IAAe,CAAf;AACH,KAhBK;AAiBNE,IAAAA,iBAAiB,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAClCD,MAAAA,KAAK,CAACK,KAAN,IAAeJ,MAAM,CAACC,OAAtB;AACH;AAnBK;AAH0B,CAAD,CAAhC;AA2BP,OAAO,MAAMM,aAAa,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACnD,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMjB,OAAO,CAAC;AAAEkB,MAAAA,GAAG,EAAE,cAAP;AAAuBC,MAAAA,MAAM,EAAE;AAA/B,KAAD,CAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkB,UAAlB;AACA,QAAI,CAACA,IAAL,EAAW,OAAOK,KAAK,CAAC,wBAAD,CAAZ,CAHX,CAIJ;;AACIN,IAAAA,QAAQ,CAACV,WAAW,CAACW,IAAI,CAACA,IAAN,CAAZ,CAAR;AACH,GAND,CAME,OAAOM,GAAP,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,CAVM;AAYP,OAAO,MAAME,YAAY,GAAIC,SAAD,IAAe,MAAOV,QAAP,IAAoB;AAC3D,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMjB,OAAO,CAAC;AAAEkB,MAAAA,GAAG,EAAE,cAAP;AAAuBC,MAAAA,MAAM,EAAE,MAA/B;AAAuCQ,MAAAA,OAAO,EAAED;AAAhD,KAAD,CAA1B;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkB,sBAAlB;AACA,QAAI,CAACA,IAAL,EAAW,OAAOK,KAAK,CAAC,uBAAD,CAAZ,CAHX,CAIJ;;AACIN,IAAAA,QAAQ,CAACN,aAAa,CAACO,IAAI,CAACA,IAAN,CAAd,CAAR;AACH,GAND,CAME,OAAOM,GAAP,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,CAVM,C,CAaP;;AACA,OAAO,MAAM;AAAEZ,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA,iBAAxB;AAA2CR,EAAAA,WAA3C;AAAwDI,EAAAA;AAAxD,IAA0EP,YAAY,CAACyB,OAA7F;AAEP,eAAezB,YAAY,CAAC0B,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { request } from '../../request'\n\nconst initialState = {\n  players: [],\n}\n\nexport const playersSlice = createSlice({\n    name: 'players',\n    initialState,\n    reducers: {\n        getPlayersR: (state, action) => {\n            state.players = action.payload;\n        },\n        createPlayerR: (state, action) => {\n            state.players = [...state.players, action.payload]\n        },\n        increment: (state) => {\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n            // doesn't actually mutate the state because it uses the Immer library,\n            // which detects changes to a \"draft state\" and produces a brand new\n            // immutable state based off those changes\n            state.value += 1\n        },\n        decrement: (state) => {\n            state.value -= 1\n        },\n        incrementByAmount: (state, action) => {\n            state.value += action.payload\n        },\n    },\n})\n\n\nexport const getAllPlayers = () => async (dispatch) => {\n    try {\n        const data = await request({ url: '/api/players', method: 'GET' });\n        console.log(data, 'daattaaa')\n        if (!data) return alert(\"error in getAllPlayers\")\n    //   const response = await axios.get(`${API_URL}/${data}`);\n        dispatch(getPlayersR(data.data));\n    } catch (err) {\n        throw new Error(err);\n    }\n};\n\nexport const createPlayer = (newPlayer) => async (dispatch) => {\n    try {\n        const data = await request({ url: '/api/players', method: 'POST', session: newPlayer});\n        console.log(data, 'data in createPlayer')\n        if (!data) return alert(\"error in createPlayer\")\n    //   const response = await axios.get(`${API_URL}/${data}`);\n        dispatch(createPlayerR(data.data));\n    } catch (err) {\n        throw new Error(err);\n    }\n};\n  \n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount, getPlayersR, createPlayerR } = playersSlice.actions\n\nexport default playersSlice.reducer"]},"metadata":{},"sourceType":"module"}